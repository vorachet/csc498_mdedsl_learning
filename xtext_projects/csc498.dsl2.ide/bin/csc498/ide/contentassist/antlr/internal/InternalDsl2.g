/*
 * generated by Xtext 2.22.0
 */
grammar InternalDsl2;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package csc498.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package csc498.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import csc498.services.Dsl2GrammarAccess;

}
@parser::members {
	private Dsl2GrammarAccess grammarAccess;

	public void setGrammarAccess(Dsl2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGamesAssignment()); }
		(rule__Model__GamesAssignment)*
		{ after(grammarAccess.getModelAccess().getGamesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGame
entryRuleGame
:
{ before(grammarAccess.getGameRule()); }
	 ruleGame
{ after(grammarAccess.getGameRule()); } 
	 EOF 
;

// Rule Game
ruleGame 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameAccess().getGroup()); }
		(rule__Game__Group__0)
		{ after(grammarAccess.getGameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUp
entryRuleUp
:
{ before(grammarAccess.getUpRule()); }
	 ruleUp
{ after(grammarAccess.getUpRule()); } 
	 EOF 
;

// Rule Up
ruleUp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpAccess().getGroup()); }
		(rule__Up__Group__0)
		{ after(grammarAccess.getUpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDown
entryRuleDown
:
{ before(grammarAccess.getDownRule()); }
	 ruleDown
{ after(grammarAccess.getDownRule()); } 
	 EOF 
;

// Rule Down
ruleDown 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDownAccess().getGroup()); }
		(rule__Down__Group__0)
		{ after(grammarAccess.getDownAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getGroup()); }
		(rule__Right__Group__0)
		{ after(grammarAccess.getRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeft
entryRuleLeft
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAccess().getGroup()); }
		(rule__Left__Group__0)
		{ after(grammarAccess.getLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getUpParserRuleCall_0()); }
		ruleUp
		{ after(grammarAccess.getCommandAccess().getUpParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDownParserRuleCall_1()); }
		ruleDown
		{ after(grammarAccess.getCommandAccess().getDownParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getRightParserRuleCall_2()); }
		ruleRight
		{ after(grammarAccess.getCommandAccess().getRightParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getLeftParserRuleCall_3()); }
		ruleLeft
		{ after(grammarAccess.getCommandAccess().getLeftParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__0__Impl
	rule__Game__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getGameKeyword_0()); }
	'Game'
	{ after(grammarAccess.getGameAccess().getGameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__1__Impl
	rule__Game__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getNameAssignment_1()); }
	(rule__Game__NameAssignment_1)
	{ after(grammarAccess.getGameAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__2__Impl
	rule__Game__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getGameAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__3__Impl
	rule__Game__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getCommandsAssignment_3()); }
	(rule__Game__CommandsAssignment_3)*
	{ after(grammarAccess.getGameAccess().getCommandsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getGameAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Up__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__0__Impl
	rule__Up__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getUpKeyword_0()); }
	'up'
	{ after(grammarAccess.getUpAccess().getUpKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__1__Impl
	rule__Up__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getUpAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__2__Impl
	rule__Up__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getValueAssignment_2()); }
	(rule__Up__ValueAssignment_2)
	{ after(grammarAccess.getUpAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getUpAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Down__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Down__Group__0__Impl
	rule__Down__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAccess().getDownKeyword_0()); }
	'down'
	{ after(grammarAccess.getDownAccess().getDownKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Down__Group__1__Impl
	rule__Down__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getDownAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Down__Group__2__Impl
	rule__Down__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAccess().getValueAssignment_2()); }
	(rule__Down__ValueAssignment_2)
	{ after(grammarAccess.getDownAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Down__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getDownAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightKeyword_0()); }
	'right'
	{ after(grammarAccess.getRightAccess().getRightKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__1__Impl
	rule__Right__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRightAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__2__Impl
	rule__Right__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getValueAssignment_2()); }
	(rule__Right__ValueAssignment_2)
	{ after(grammarAccess.getRightAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRightAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__0__Impl
	rule__Left__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftKeyword_0()); }
	'left'
	{ after(grammarAccess.getLeftAccess().getLeftKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__1__Impl
	rule__Left__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLeftAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__2__Impl
	rule__Left__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getValueAssignment_2()); }
	(rule__Left__ValueAssignment_2)
	{ after(grammarAccess.getLeftAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getLeftAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__GamesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGamesGameParserRuleCall_0()); }
		ruleGame
		{ after(grammarAccess.getModelAccess().getGamesGameParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGameAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getCommandsCommandParserRuleCall_3_0()); }
		ruleCommand
		{ after(grammarAccess.getGameAccess().getCommandsCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpAccess().getValueINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getUpAccess().getValueINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDownAccess().getValueINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getDownAccess().getValueINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getValueINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getRightAccess().getValueINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAccess().getValueINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getLeftAccess().getValueINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
