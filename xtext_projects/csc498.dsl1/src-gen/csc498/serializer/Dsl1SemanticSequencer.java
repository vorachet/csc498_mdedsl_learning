/*
 * generated by Xtext 2.22.0
 */
package csc498.serializer;

import com.google.inject.Inject;
import csc498.dsl1.Contact;
import csc498.dsl1.Dsl1Package;
import csc498.dsl1.Email;
import csc498.dsl1.Model;
import csc498.dsl1.RSVP;
import csc498.services.Dsl1GrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class Dsl1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Dsl1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Dsl1Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Dsl1Package.CONTACT:
				sequence_Contact(context, (Contact) semanticObject); 
				return; 
			case Dsl1Package.EMAIL:
				sequence_Email(context, (Email) semanticObject); 
				return; 
			case Dsl1Package.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Dsl1Package.RSVP:
				sequence_RSVP(context, (RSVP) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Contact returns Contact
	 *
	 * Constraint:
	 *     (name=ID email=STRING)
	 */
	protected void sequence_Contact(ISerializationContext context, Contact semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Dsl1Package.Literals.CONTACT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Dsl1Package.Literals.CONTACT__NAME));
			if (transientValues.isValueTransient(semanticObject, Dsl1Package.Literals.CONTACT__EMAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Dsl1Package.Literals.CONTACT__EMAIL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContactAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getContactAccess().getEmailSTRINGTerminalRuleCall_3_0(), semanticObject.getEmail());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Email returns Email
	 *
	 * Constraint:
	 *     (name=ID contacts+=[Contact|ID]+ message=STRING)
	 */
	protected void sequence_Email(ISerializationContext context, Email semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((contacts+=Contact* rsvps+=RSVP+ emails+=Email+) | (contacts+=Contact* emails+=Email+) | emails+=Email+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RSVP returns RSVP
	 *
	 * Constraint:
	 *     (name=ID message=STRING)
	 */
	protected void sequence_RSVP(ISerializationContext context, RSVP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Dsl1Package.Literals.RSVP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Dsl1Package.Literals.RSVP__NAME));
			if (transientValues.isValueTransient(semanticObject, Dsl1Package.Literals.RSVP__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Dsl1Package.Literals.RSVP__MESSAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRSVPAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRSVPAccess().getMessageSTRINGTerminalRuleCall_3_0(), semanticObject.getMessage());
		feeder.finish();
	}
	
	
}
