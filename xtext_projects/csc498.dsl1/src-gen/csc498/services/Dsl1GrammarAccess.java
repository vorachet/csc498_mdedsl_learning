/*
 * generated by Xtext 2.22.0
 */
package csc498.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Dsl1GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "csc498.Dsl1.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContactsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContactsContactParserRuleCall_0_0 = (RuleCall)cContactsAssignment_0.eContents().get(0);
		private final Assignment cRsvpsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRsvpsRSVPParserRuleCall_1_0 = (RuleCall)cRsvpsAssignment_1.eContents().get(0);
		private final Assignment cEmailsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmailsEmailParserRuleCall_2_0 = (RuleCall)cEmailsAssignment_2.eContents().get(0);
		
		//Model:
		//	contacts+=Contact*
		//	rsvps+=RSVP*
		//	emails+=Email*;
		@Override public ParserRule getRule() { return rule; }
		
		//contacts+=Contact* rsvps+=RSVP* emails+=Email*
		public Group getGroup() { return cGroup; }
		
		//contacts+=Contact*
		public Assignment getContactsAssignment_0() { return cContactsAssignment_0; }
		
		//Contact
		public RuleCall getContactsContactParserRuleCall_0_0() { return cContactsContactParserRuleCall_0_0; }
		
		//rsvps+=RSVP*
		public Assignment getRsvpsAssignment_1() { return cRsvpsAssignment_1; }
		
		//RSVP
		public RuleCall getRsvpsRSVPParserRuleCall_1_0() { return cRsvpsRSVPParserRuleCall_1_0; }
		
		//emails+=Email*
		public Assignment getEmailsAssignment_2() { return cEmailsAssignment_2; }
		
		//Email
		public RuleCall getEmailsEmailParserRuleCall_2_0() { return cEmailsEmailParserRuleCall_2_0; }
	}
	public class ContactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "csc498.Dsl1.Contact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEmailKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEmailAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEmailSTRINGTerminalRuleCall_3_0 = (RuleCall)cEmailAssignment_3.eContents().get(0);
		
		//Contact:
		//	'Contact' name=ID 'email' email=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Contact' name=ID 'email' email=STRING
		public Group getGroup() { return cGroup; }
		
		//'Contact'
		public Keyword getContactKeyword_0() { return cContactKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'email'
		public Keyword getEmailKeyword_2() { return cEmailKeyword_2; }
		
		//email=STRING
		public Assignment getEmailAssignment_3() { return cEmailAssignment_3; }
		
		//STRING
		public RuleCall getEmailSTRINGTerminalRuleCall_3_0() { return cEmailSTRINGTerminalRuleCall_3_0; }
	}
	public class RSVPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "csc498.Dsl1.RSVP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRSVPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMessageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageSTRINGTerminalRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		
		//RSVP:
		//	'RSVP' name=ID
		//	'message' message=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'RSVP' name=ID 'message' message=STRING
		public Group getGroup() { return cGroup; }
		
		//'RSVP'
		public Keyword getRSVPKeyword_0() { return cRSVPKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'message'
		public Keyword getMessageKeyword_2() { return cMessageKeyword_2; }
		
		//message=STRING
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_3_0() { return cMessageSTRINGTerminalRuleCall_3_0; }
	}
	public class EmailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "csc498.Dsl1.Email");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmailKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContactsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cContactsContactCrossReference_4_0 = (CrossReference)cContactsAssignment_4.eContents().get(0);
		private final RuleCall cContactsContactIDTerminalRuleCall_4_0_1 = (RuleCall)cContactsContactCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cMessageKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMessageAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMessageSTRINGTerminalRuleCall_7_0 = (RuleCall)cMessageAssignment_7.eContents().get(0);
		
		//Email:
		//	'Email' name=ID
		//	'to' '{' contacts+=[Contact]+ '}'
		//	'message' message=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Email' name=ID 'to' '{' contacts+=[Contact]+ '}' 'message' message=STRING
		public Group getGroup() { return cGroup; }
		
		//'Email'
		public Keyword getEmailKeyword_0() { return cEmailKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//contacts+=[Contact]+
		public Assignment getContactsAssignment_4() { return cContactsAssignment_4; }
		
		//[Contact]
		public CrossReference getContactsContactCrossReference_4_0() { return cContactsContactCrossReference_4_0; }
		
		//ID
		public RuleCall getContactsContactIDTerminalRuleCall_4_0_1() { return cContactsContactIDTerminalRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//'message'
		public Keyword getMessageKeyword_6() { return cMessageKeyword_6; }
		
		//message=STRING
		public Assignment getMessageAssignment_7() { return cMessageAssignment_7; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_7_0() { return cMessageSTRINGTerminalRuleCall_7_0; }
	}
	
	
	private final ModelElements pModel;
	private final ContactElements pContact;
	private final RSVPElements pRSVP;
	private final EmailElements pEmail;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Dsl1GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pContact = new ContactElements();
		this.pRSVP = new RSVPElements();
		this.pEmail = new EmailElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("csc498.Dsl1".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	contacts+=Contact*
	//	rsvps+=RSVP*
	//	emails+=Email*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Contact:
	//	'Contact' name=ID 'email' email=STRING;
	public ContactElements getContactAccess() {
		return pContact;
	}
	
	public ParserRule getContactRule() {
		return getContactAccess().getRule();
	}
	
	//RSVP:
	//	'RSVP' name=ID
	//	'message' message=STRING;
	public RSVPElements getRSVPAccess() {
		return pRSVP;
	}
	
	public ParserRule getRSVPRule() {
		return getRSVPAccess().getRule();
	}
	
	//Email:
	//	'Email' name=ID
	//	'to' '{' contacts+=[Contact]+ '}'
	//	'message' message=STRING;
	public EmailElements getEmailAccess() {
		return pEmail;
	}
	
	public ParserRule getEmailRule() {
		return getEmailAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
